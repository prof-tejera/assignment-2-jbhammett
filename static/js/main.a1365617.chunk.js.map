{"version":3,"sources":["components/documentation/DocumentComponent.js","components/generic/Loading.js","views/DocumentationView.js","components/generic/DisplayTime.js","components/generic/Panel.js","utils/helpers.js","utils/TimersProvider.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/generic/DisplayRounds.js","components/timers/XY.js","components/generic/DisplayTitle.js","components/timers/Tabata.js","components/generic/Button.js","views/TimersView.js","components/generic/TimerInput.js","views/AddTimersView.js","App.js","index.js"],"names":["Wrapper","styled","div","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","Title","_templateObject3","RenderComponent","_templateObject4","Documentation","table","_templateObject5","DocumentComponent","_ref","title","component","propDocs","React","createElement","map","doc","index","key","prop","description","type","defaultValue","primaryColor","sizeMapping","small","medium","large","Dot","span","props","size","color","DotGroup","Loading","DisplayTime","minutes","seconds","style","marginBottom","toString","padStart","Panel","children","textAlign","border","borderRadius","padding","paddingTop","margin","backgroundColor","fontSize","CalculateTotalSeconds","parseInt","CalculateMinutesSeconds","totalSeconds","Math","floor","makeId","result","characters","charactersLength","length","i","charAt","random","ResetTimer","interval","setCounter","value","clearInterval","current","TimersContext","createContext","TimersProvider","timers","setTimers","useState","selectedTimer","setSelectedTimer","currentTimer","setCurrentTimer","currentIndex","setCurrentIndex","useRef","closeEditor","minutesOptions","push","roundsOptions","j","Provider","editorOpen","secondsOptions","deleteTimer","_ref2","id","filter","x","openEditor","openTimer","_ref3","t","find","handleWorkoutReset","isRunning","handlePauseResume","handleFastForward","prev","handleTimerStart","saveTimer","_ref4","startMinutes","startSeconds","rounds","startRestMinutes","startRestSeconds","reset","updatedTimer","updatedTimers","Stopwatch","useContext","counter","secondsCountInterval","useEffect","setInterval","c","textTransform","Countdown","duration","DisplayRounds","round","totalRounds","marginRight","XY","roundsCounter","setRoundsCounter","DisplayTitle","Tabata","workDuration","restDuration","restCounter","setRestCounter","prevRest","Button","onClick","start","width","fontWeight","Timers","Timer","TimerTitle","TimersView","totalTime","timersDisplay","C","timer","TimerInput","options","timeType","onChange","listOptions","option","e","target","Editor","_selectedTimer$startM","_selectedTimer$startS","_selectedTimer$rounds","_selectedTimer$restMi","_selectedTimer$restSe","setStartMinutes","setStartSeconds","setRounds","setStartRestMinutes","restMinutes","setStartRestSeconds","restSeconds","handleSelectedTimerMinutes","handleSelectedTimerSeconds","handleSelectedTimerRounds","handleAddTimerInput","marginTop","AddTimersView","Nav","Link","to","textDecoration","App","Router","Routes","Route","path","element","DocumentationView","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a1365617.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  border: 1px solid #121212;\n  margin: 20px 0px;\n`;\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 20px;\n  font-size: 1.3rem;\n`;\n\nconst RenderComponent = styled.div`\n  padding: 25px;\n  display: flex;\n  align-items: center;\n`;\n\nconst Documentation = styled.table``;\n\nconst DocumentComponent = ({ title, component, propDocs }) => {\n  return (\n    <Wrapper>\n      <Title>{title}</Title>\n      <Container>\n        <RenderComponent>{component}</RenderComponent>\n        <Documentation>\n          <thead>\n            <tr>\n              <th>Prop</th>\n              <th>Description</th>\n              <th>Type</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {propDocs.map((doc, index) => {\n              return (\n                <tr key={index}>\n                  <td>{doc.prop}</td>\n                  <td>{doc.description}</td>\n                  <td>{doc.type}</td>\n                  <td>\n                    <code>{doc.defaultValue}</code>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Documentation>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default DocumentComponent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst primaryColor = \"#ffa2bf\";\n\nconst sizeMapping = {\n  small: 10,\n  medium: 14,\n  large: 20,\n};\n\nconst Container = styled.div`\n  animation: spin 1.5s linear infinite;\n\n  @-moz-keyframes spin {\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Dot = styled.span`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => props.color};\n  border-radius: 100%;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n  opacity: 0.3;\n  animation: wobble 1s ease-in-out infinite;\n\n  @keyframes wobble {\n    0% {\n      border-radius: 25%;\n    }\n    100% {\n      border-radius: 100%;\n    }\n  }\n`;\n\nconst DotGroup = styled.div`\n  display: flex;\n`;\n\nconst Loading = ({ size = \"medium\", color = primaryColor }) => {\n  return (\n    <Container>\n      <DotGroup>\n        <Dot size={sizeMapping[size]} color={color} />\n        <Dot size={sizeMapping[size]} color={color} />\n      </DotGroup>\n      <DotGroup>\n        <Dot size={sizeMapping[size]} color={color} />\n        <Dot size={sizeMapping[size]} color={color} />\n      </DotGroup>\n    </Container>\n  );\n};\n\nLoading.propTypes = {\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  color: PropTypes.string,\n};\n\nexport default Loading;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\n\nimport Loading from \"../components/generic/Loading\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\n/**\n * You can document your components by using the DocumentComponent component\n */\nconst Documentation = () => {\n  return (\n    <Container>\n      <div>\n        <Title>Documentation</Title>\n        <DocumentComponent\n          title=\"Loading spinner \"\n          component={<Loading />}\n          propDocs={[\n            {\n              prop: \"size\",\n              description: \"Changes the size of the loading spinner\",\n              type: \"string\",\n              defaultValue: \"medium\",\n            },\n          ]}\n        />\n      </div>\n    </Container>\n  );\n};\n\nexport default Documentation;\n","import React from \"react\";\n\nconst DisplayTime = ({minutes, seconds}) => {\n    return(\n        <div style={{\n            marginBottom: 10\n        }}>\n            {minutes.toString().padStart(2,\"0\")}:{seconds.toString().padStart(2,\"0\")}\n        </div>\n    );\n };\n \n export default DisplayTime;\n","import React from \"react\";\n\n\nconst Panel = ({ type, children }) => {\n  \n    // here you can apply some styling or arrange\n    // elements as you wish, maybe pass the type in for example\n    return (<div style={{\n        textAlign: \"center\",\n        color: \"#555555\",\n        border: \"solid\",\n        borderRadius: \"10%\",\n        padding: 20,\n        paddingTop: 5,\n        margin: 10,\n        backgroundColor: \"#ffffff\",\n        fontSize: \"1.25rem\"\n        \n    }}>\n      <h3 style={{\n        marginBottom: 5,\n        fontSize: \"2rem\"\n      }}>{type}</h3>\n      {children}\n    </div>\n    );  \n};\n  \n\n\nexport default Panel;","// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// everywhere.\n\n\n// Convert minutes and seconds to seconds\nexport const CalculateTotalSeconds = (minutes, seconds) => {\n    if (!minutes){\n        minutes = 0;\n    }\n    if (!seconds){\n        seconds = 0;\n    }\n    const total = (parseInt(minutes * 60)) + parseInt(seconds);\n    return total;\n};\n\n\n// Convert seconds to minutes and seconds\nexport const CalculateMinutesSeconds = totalSeconds => {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return [minutes, seconds];\n};\n\n\n\nexport const HandleStopButton = ((prop, interval, start) => {\n    if (prop === 'paused'){\n        if (interval.current) {\n            clearInterval(interval.current);\n            interval.current = null;\n        }\n        else {\n            start();\n        }\n    }\n\n});\n\n\n\n//From blog lecture example\nexport const makeId = () => {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < 20; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n  };\n\nexport const ResetTimer = ((prop, interval, setCounter, value) => {\n    if (prop === 'not running'){\n        clearInterval(interval.current);\n        setCounter(value);\n      \n    }\n\n    else if (prop === 'paused'){\n        clearInterval(interval.current);\n    }\n});\n\n","import React, { useState, useRef } from 'react';\nimport { makeId } from \"../utils/helpers\";\n\nexport const TimersContext = React.createContext({});\n\nconst TimersProvider = ({ children }) => {\n    const [timers, setTimers] = useState([]);\n    const [selectedTimer, setSelectedTimer] = useState(null);\n    const [currentTimer, setCurrentTimer] = useState(null);\n    const [currentIndex, setCurrentIndex] = useState(null);\n  \n    const totalSeconds = useRef(0);\n\n\n    const closeEditor = () => {\n        setSelectedTimer(null);\n    };\n\n    const secondsOptions = [0, 5, 15, 30, 45];\n    \n    const minutesOptions = []\n    for (let i=0; i < 60; i++){\n        minutesOptions.push(i);\n    }\n\n    const roundsOptions = []\n    for (let j=1; j < 20; j++){\n        roundsOptions.push(j);\n    }\n\n    return (\n        <TimersContext.Provider\n            value={{\n                timers,\n                editorOpen: !!selectedTimer,\n                currentTimer,\n                setCurrentTimer,\n                currentIndex,\n                setCurrentIndex,\n                selectedTimer,\n                secondsOptions,\n                minutesOptions,\n                roundsOptions,\n                totalSeconds,\n                \n                closeEditor,\n                deleteTimer: ({ id }) => setTimers(timers.filter(x => x.id !== id)),\n                openEditor: () => setSelectedTimer({}),\n\n\n                openTimer: ({ id }) => {\n                    const t = timers.find(t => t.id === id);\n                    setSelectedTimer(t);\n                  },\n\n                handleWorkoutReset: () =>{\n                    timers[currentIndex].isRunning = 'not running';\n                    setCurrentIndex(null);\n                },\n                \n                handlePauseResume: () => {\n                    timers[currentIndex].isRunning = 'paused';\n                },\n\n                handleFastForward: () => {\n                    setCurrentIndex(prev => {\n                        return prev + 1;\n                    });\n                },\n\n\n                handleTimerStart: () => {\n                    if (currentIndex) {\n                        setCurrentIndex(currentIndex);\n                    }\n                    else {\n                        setCurrentIndex(0);\n                    }       \n                },\n\n                saveTimer: ({ id, index, selectedTimer, startMinutes, startSeconds, rounds, startRestMinutes, startRestSeconds, isRunning, reset }) => {\n                    const updatedTimer = {\n                        id,\n                        index,\n                        selectedTimer,\n                        startMinutes,\n                        startSeconds, \n                        rounds,\n                        startRestMinutes,\n                        startRestSeconds,\n                        isRunning,\n                        reset,\n                    };\n\n                    if (id) {\n                        const updatedTimers = timers.map(t => (t.id === id ? updatedTimer : t ));\n                        setTimers(updatedTimers);\n                    } else {\n                        \n                        setTimers([\n                            ...timers,\n                            {\n                                ...updatedTimer,\n                                id: makeId(),\n                                index: (timers.length === 0) ? 0 : timers.length,\n                                isRunning: 'not running',\n                                \n                              \n                            },\n                        ])\n                        \n                    }\n                    closeEditor();\n            \n                },\n \n            }}\n        >\n            {children}\n        </TimersContext.Provider>\n\n\n    );\n};\n\nexport default TimersProvider;","import React from \"react\";\nimport {  useContext, useRef, useState, useEffect } from 'react';\n\nimport DisplayTime from \"../generic/DisplayTime\";\nimport Panel from \"../generic/Panel\";\nimport { CalculateMinutesSeconds, CalculateTotalSeconds, ResetTimer } from \"../../utils/helpers\";\nimport { TimersContext } from \"../../utils/TimersProvider\";\n\n\nconst Stopwatch = ({id, index, startMinutes, startSeconds, isRunning }) =>  {\n    const { currentIndex, setCurrentIndex } = useContext(TimersContext);\n    const [counter, setCounter] = useState(0);\n    const secondsCountInterval = useRef(0);\n    const totalSeconds = useRef(CalculateTotalSeconds(startMinutes, startSeconds));\n    \n\n    if (index === currentIndex){\n        isRunning = 'running';\n    }\n    else if (index < currentIndex){\n        isRunning = 'completed';\n    }\n    else {\n        isRunning = 'not running';\n    }\n\n    useEffect(() => {\n        if (isRunning === 'not running') {\n            ResetTimer(isRunning, secondsCountInterval, setCounter, 0);\n        }\n        \n    }, [isRunning]);\n\n    useEffect(() => {\n        if (index === currentIndex) {\n            secondsCountInterval.current = setInterval(() => {\n            setCounter(prev => {\n              return prev + 1;\n            });\n          }, 1000);\n        }\n    \n        return () => {\n          clearInterval(secondsCountInterval.current);\n        };\n      }, [currentIndex, index]);\n    \n      useEffect(() => {\n        if (counter === totalSeconds.current) {\n          clearInterval(secondsCountInterval.current);\n          setCurrentIndex(c => c + 1);\n        }\n      }, [counter, setCurrentIndex]);\n\n\n\n\treturn (\n        <div>\n            <Panel type=\"Stopwatch\">\n      \n                <div>\n                    <h5 style = {{\n                        textTransform: 'capitalize',\n                    }}\n                    \n                    >{isRunning}</h5>\n                </div>\n                \n                {isRunning === 'running' && <DisplayTime minutes={CalculateMinutesSeconds(counter)[0]} seconds={CalculateMinutesSeconds(counter)[1]}/>}\n                {isRunning === 'not running' && <DisplayTime minutes=\"0\" seconds=\"0\"/>}\n                {isRunning === 'completed' && <DisplayTime minutes={startMinutes} seconds={startSeconds}/>}\n                            \n            \n            </Panel>\n        </div>\n\n\t\t);\n};\nexport default Stopwatch;\n","import React from \"react\";\nimport { useState, useEffect, useRef, useContext } from 'react';\n\nimport DisplayTime from \"../generic/DisplayTime\";\nimport Panel from \"../generic/Panel\";\nimport { TimersContext } from \"../../utils/TimersProvider\";\n\nimport { CalculateMinutesSeconds, CalculateTotalSeconds, ResetTimer } from \"../../utils/helpers\";\n\n\nconst Countdown = ({ id, index, startMinutes, startSeconds, isRunning })=> {\n    const { currentIndex, setCurrentIndex } = useContext(TimersContext);\n    \n    const duration = CalculateTotalSeconds(startMinutes, startSeconds);\n    const [counter, setCounter] = useState(duration);\n    const secondsCountInterval = useRef(0);\n\n    if (index === currentIndex){\n        isRunning = 'running';\n    }\n    else if (index < currentIndex){\n        isRunning = 'completed';\n    }\n    else {\n        isRunning = 'not running';\n    }\n\n    useEffect(() => {\n        if (isRunning === 'not running') {\n            ResetTimer(isRunning, secondsCountInterval, setCounter, duration);\n        }\n\n        \n    }, [isRunning, duration]);\n\n    useEffect(() => {\n        ResetTimer(isRunning, secondsCountInterval, setCounter, duration);\n    }, [isRunning, duration]);\n\n    useEffect(() => {\n        if (index === currentIndex) {\n            secondsCountInterval.current = setInterval(() => {\n            setCounter(prev => {\n              return prev - 1;\n            });\n          }, 1000);\n        }\n    \n        return () => {\n          clearInterval(secondsCountInterval.current);\n        };\n      }, [currentIndex, index]);\n    \n      useEffect(() => {\n        if (counter === 0) {\n          clearInterval(secondsCountInterval.current);\n          setCurrentIndex(c => c + 1);\n        }\n      }, [counter, setCurrentIndex]);\n\n\treturn (\n        <div>\n            <Panel type=\"Countdown\">\n      \n                <div>\n                    <h5 style = {{\n                        textTransform: 'capitalize',\n                    }}\n                    \n                    >{isRunning}</h5>\n                </div>\n\n                {isRunning === 'running' && <DisplayTime minutes={CalculateMinutesSeconds(counter)[0]} seconds={CalculateMinutesSeconds(counter)[1]}/>}\n                {isRunning === 'not running' && <DisplayTime minutes={startMinutes} seconds={startSeconds}/>}\n                {isRunning === 'completed' && <DisplayTime minutes=\"0\" seconds=\"0\" />}\n            </Panel>\n        </div>\n\n\t\t);\n};\n\n\nexport default Countdown;\n","import React from \"react\";\n\nconst DisplayRounds = ({round, totalRounds}) => {\n    return(\n        <div style={{\n            fontSize: \"1rem\",\n            marginRight: 5,\n        }}>\n            Round: {round} of {totalRounds}\n        </div>\n    );\n };\n \n export default DisplayRounds;\n","import React from \"react\";\nimport { useContext, useRef, useState, useEffect } from 'react';\n\nimport DisplayTime from \"../generic/DisplayTime\";\nimport DisplayRounds from \"../generic/DisplayRounds\";\nimport Panel from \"../generic/Panel\";\nimport { CalculateMinutesSeconds, CalculateTotalSeconds, ResetTimer } from \"../../utils/helpers\";\nimport { TimersContext } from \"../../utils/TimersProvider\";\n\nconst XY = ({ id, index, startMinutes, startSeconds, rounds, isRunning }) => {\n    const { currentIndex, setCurrentIndex } = useContext(TimersContext);\n\n    const duration = CalculateTotalSeconds(startMinutes, startSeconds);\n    const [counter, setCounter] = useState(duration);\n    const secondsCountInterval = useRef(0);\n    const [roundsCounter, setRoundsCounter] = useState(1);\n\n    if (index === currentIndex){\n        isRunning = 'running';\n    }\n    else if (index < currentIndex){\n        isRunning = 'completed';\n    }\n    else {\n        isRunning = 'not running';\n    }\n\n    useEffect(() => {\n        ResetTimer(isRunning, secondsCountInterval, setCounter, duration);\n        setRoundsCounter(1);\n    }, [isRunning, duration]);\n\n    useEffect(() => {\n        if (index === currentIndex) {\n            secondsCountInterval.current = setInterval(() => {\n            setCounter(prev => {\n              return prev - 1;\n            });\n          }, 1000);\n        }\n    \n        return () => {\n          clearInterval(secondsCountInterval.current);\n        };\n      }, [currentIndex, index]);\n    \n      useEffect(() => {\n        if (counter === 0 && roundsCounter < rounds){\n            setRoundsCounter( prev=> {\n                return prev + 1;\n            });\n            setCounter(duration);\n        }; \n\n        if (counter === 0 && parseInt(roundsCounter) === parseInt(rounds)) {\n          clearInterval(secondsCountInterval.current);\n          setCurrentIndex(c => c + 1);\n        }\n      }, [counter, rounds, index, duration, roundsCounter, setCurrentIndex]);\n\n\n    return (\n        <div>\n            <Panel type=\"XY\">\n            \n                <div>\n                    <h5 style = {{\n                        textTransform: 'capitalize',\n                    }}\n                    \n                    >{isRunning}</h5>\n                </div>\n                {isRunning === 'running' && <DisplayRounds round={roundsCounter} totalRounds={rounds} />}\n                {(isRunning ==='not running' || isRunning ==='completed') && <DisplayRounds round=\"1\" totalRounds={rounds} />}\n                                \n                {isRunning === 'running' && <DisplayTime minutes={CalculateMinutesSeconds(counter)[0]} seconds={CalculateMinutesSeconds(counter)[1]}/>}\n                {isRunning ==='not running' && <DisplayTime minutes={startMinutes} seconds={startSeconds}/>}\n                {isRunning ==='completed' && <DisplayTime minutes=\"0\" seconds=\"0\" />}\n    \n            </Panel>        \n        </div>\n\n        );\n};\n\n\n\n\n\nexport default XY;\n","import React from \"react\";\n\nconst DisplayTitle = ({title}) => {\n    return(\n        <span style={{\n            fontSize: \"1rem\",\n            marginRight: 5,\n        }}>\n            {title}\n        </span>\n    );\n };\n \n export default DisplayTitle;\n","import React from \"react\";\nimport { useContext, useRef, useState, useEffect } from 'react';\n\nimport DisplayTime from \"../generic/DisplayTime\";\nimport DisplayRounds from \"../generic/DisplayRounds\";\nimport Panel from \"../generic/Panel\";\nimport DisplayTitle from \"../generic/DisplayTitle\";\nimport { CalculateMinutesSeconds, CalculateTotalSeconds, ResetTimer } from \"../../utils/helpers\";\nimport { TimersContext } from \"../../utils/TimersProvider\";\n\nconst Tabata = ({ id, index, startMinutes, startSeconds, rounds, startRestMinutes, startRestSeconds, isRunning }) => {\n    \n    const { currentIndex, setCurrentIndex, } = useContext(TimersContext);\n\n    const workDuration = CalculateTotalSeconds(startMinutes, startSeconds);\n    const restDuration = CalculateTotalSeconds(startRestMinutes, startRestSeconds);\n    const [counter, setCounter] = useState(workDuration);\n    const [restCounter, setRestCounter] = useState(restDuration);\n    const secondsCountInterval = useRef(0);\n    const [roundsCounter, setRoundsCounter] = useState(1);\n\n    if (index === currentIndex){\n        isRunning = 'running';\n    }\n    else if (index < currentIndex){\n        isRunning = 'completed';\n    }\n    else {\n        isRunning = 'not running';\n    }\n\n    useEffect(() => {\n        ResetTimer(isRunning, secondsCountInterval, setCounter, workDuration);\n        setRestCounter(restDuration);\n        setRoundsCounter(1);\n    }, [isRunning, restDuration, workDuration]);\n\n    useEffect(() => {\n        if (index === currentIndex) {\n            secondsCountInterval.current = setInterval(() => {\n                if(counter > 0){\n                    setCounter(prev => {\n                        return prev - 1;\n                    });\n                }\n                else if (counter <= 0 && restCounter > 0){\n                    setRestCounter(prevRest => {\n                        return prevRest - 1;\n                    });\n                }\n            \n          }, 1000);\n        }\n    \n        return () => {\n          clearInterval(secondsCountInterval.current);\n        };\n      }, [currentIndex, counter, restCounter, index]);\n\n      useEffect(() => {\n        if (restCounter === 0 && roundsCounter < rounds){\n            setRoundsCounter( prev=> {\n                return prev + 1;\n            });\n            setCounter(workDuration);\n            setRestCounter(restDuration);\n        }; \n        if (restCounter === 0 && parseInt(roundsCounter) === parseInt(rounds)) {\n          clearInterval(secondsCountInterval.current);\n          setCurrentIndex(c => c + 1);\n        }\n      }, [restCounter, roundsCounter, restDuration, rounds, setCurrentIndex, workDuration]);\n\n    \n    return (\n        <div>\n            <Panel type=\"Tabata\">\n         \n            <div>\n                <h5 style = {{\n                    textTransform: 'capitalize',\n                }}\n                \n                >{isRunning}</h5>\n            </div>\n  \n\n            <DisplayTitle title=\"Work\" />\n            {isRunning === 'not running' && <DisplayTime minutes={startMinutes} seconds={startSeconds}/>}\n            {isRunning === 'running' && <DisplayTime minutes={CalculateMinutesSeconds(counter)[0]} seconds={CalculateMinutesSeconds(counter)[1]}/>}\n            {isRunning === 'completed' && <DisplayTime minutes=\"0\" seconds=\"0\" />}\n\n            <DisplayTitle title=\"Rest\" />\n            {isRunning === 'not running' && <DisplayTime minutes={startMinutes} seconds={startSeconds}/>}\n            {isRunning === 'running' && <DisplayTime minutes={CalculateMinutesSeconds(restCounter)[0]} seconds={CalculateMinutesSeconds(restCounter)[1]} />}\n            {isRunning === 'completed' && <DisplayTime minutes=\"0\" seconds=\"0\" />}\n\n\n            {isRunning === 'not running' && <DisplayRounds round=\"1\" totalRounds={rounds} />}\n            {isRunning === 'running' && <DisplayRounds round={roundsCounter} totalRounds={rounds} />}\n            {isRunning === 'completed' && <DisplayRounds round={rounds} totalRounds={rounds} />}\n            \n        </Panel>  \n        </div>\n    \n        );\n    };\n\n\nexport default Tabata;\n","import React from \"react\";\n\nconst Button = ({value, color, onClick, interval, start}) => {\n\n    return (\n      <div\n       onClick={()=>onClick(interval, start)}   \n        style={{\n            padding: 5,\n            width: 200,\n            margin: 5,\n            backgroundColor: color,\n            fontSize: \"1rem\",\n            textAlign: \"center\",\n            borderRadius: \"5px\",\n            // marginRight: \"auto\",\n            // marginLeft: \"auto\",\n            fontWeight: \"600\",\n            textTransform: \"uppercase\"\n        }}>\n            {value}\n\n      </div>  \n    );\n\n    \n};\n\nexport default Button;","import React from \"react\";\nimport { useContext } from \"react\";\nimport styled from \"styled-components\";\n\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\n\nimport Button from \"../components/generic/Button\";\nimport DisplayTime from \"../components/generic/DisplayTime\";\n\nimport { TimersContext } from \"../utils/TimersProvider\";\nimport { CalculateTotalSeconds, CalculateMinutesSeconds } from \"../utils/helpers\";\n\n\nconst Timers = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Timer = styled.div`\n  border: 1px solid gray;\n  padding: 20px;\n  margin: 10px;\n  font-size: 1.5rem;\n`;\n\nconst TimerTitle = styled.div``;\n\nconst TimersView = () => {\n  const { timers, deleteTimer, handleTimerStart, handleWorkoutReset, handlePauseResume, handleFastForward} = useContext(TimersContext);\n  let totalTime = 0;\n  const timersDisplay = []\n  for (let i=0; i<timers.length; i++){\n    if (timers[i].selectedTimer === 'Stopwatch'){\n      timersDisplay.push({title: \"Stopwatch\", id: timers[i].id, C: <Stopwatch id={timers[i].id} index={i} startMinutes={timers[i].startMinutes} startSeconds={timers[i].startSeconds} isRunning={timers[i].isRunning} />})\n    }\n    else if (timers[i].selectedTimer === 'Countdown'){\n      timersDisplay.push({title: \"Countdown\", id: timers[i].id, index: i, C: <Countdown id={timers[i].id} index={i} startMinutes={timers[i].startMinutes} startSeconds={timers[i].startSeconds} isRunning={timers[i].isRunning} />})\n    }\n    else if (timers[i].selectedTimer === 'XY'){\n      timersDisplay.push({title: \"XY\", id: timers[i].id, index: i,  C: <XY id={timers[i].id} index={i} startMinutes={timers[i].startMinutes} startSeconds={timers[i].startSeconds} rounds={timers[i].rounds} isRunning={timers[i].isRunning} />})\n    }\n    else if (timers[i].selectedTimer === 'Tabata'){\n      timersDisplay.push({title: \"Tabata\", id: timers[i].id, index: i, C: <Tabata id={timers[i].id} index={i} startMinutes={timers[i].startMinutes} startSeconds={timers[i].startSeconds} rounds={timers[i].rounds} startRestMinutes={timers[i].startRestMinutes} startRestSeconds={timers[i].startRestSeconds} isRunning={timers[i].isRunning} />})\n    }\n\n    const currentTimerTime = CalculateTotalSeconds(timers[i].startMinutes, timers[i].startSeconds);\n    totalTime = totalTime + currentTimerTime;\n\n  }\n\n\n  return (\n\n    <div>\n      <Button value=\"Start Workout\" color='#aaa0ff' onClick={handleTimerStart} />\n      <Button value=\"Reset\" color='#aaa0ff' onClick={handleWorkoutReset} />\n      <Button value=\"Pause/Resume\" color='#aaa0ff' onClick={handlePauseResume} />\n      <Button value=\"Fast Forward\" color='#aaa0ff' onClick={handleFastForward} />\n      <h2>Total Workout Time </h2>\n      <DisplayTime minutes={CalculateMinutesSeconds(totalTime)[0]} seconds={CalculateMinutesSeconds(totalTime)[1]} />\n\n      <Timers>\n        {timersDisplay.map((timer) => (\n          <div key={timer.index}>\n            <Timer >\n              <TimerTitle>{timer.title}</TimerTitle>\n              {timer.C}\n            </Timer>\n            <Button value=\"Delete Timer\" onClick={() => {\n                    deleteTimer({ id: timer.id });\n                  }} />\n                 \n                  \n          </div>\n        ))}\n      </Timers>\n    </div>\n  );\n};\n\nexport default TimersView;\n","import React from \"react\";\n\n    \nconst TimerInput = ({options, value, timeType, onChange}) => {\n    let listOptions = ''\n    if (options){\n        listOptions = options.map((option,index) => <option key={index} value={option}>{option}</option>);\n    }\n    else {\n        listOptions=<option>none</option>\n    }\n  \n\treturn (\n\n        \n        <span style={{ padding:2 }}>\n            <select value={value} onChange={e => onChange(e.target.value)} >\n                {listOptions}\n            </select>\n        </span>\n\t\t);\n    \n};\n\nexport default TimerInput;","import React from \"react\";\nimport { useContext, useState } from 'react';\n\nimport Button from \"../components/generic/Button\";\nimport TimerInput from \"../components/generic/TimerInput\";\n\nimport { TimersContext } from \"../utils/TimersProvider\";\n\n\nconst Editor = () => {\n    const { timers, saveTimer, closeEditor, secondsOptions, minutesOptions, roundsOptions } = useContext(TimersContext);\n    const [selectedTimer, setSelectedTimer ] = useState(null);\n    const [startMinutes, setStartMinutes] = useState(selectedTimer?.startMinutes ?? '');\n    const [startSeconds, setStartSeconds] = useState(selectedTimer?.startSeconds ?? '');\n    const [rounds, setRounds] = useState(selectedTimer?.rounds ?? '');\n    const [startRestMinutes, setStartRestMinutes] = useState(selectedTimer?.restMinutes ?? '');\n    const [startRestSeconds, setStartRestSeconds] = useState(selectedTimer?.restSeconds ?? '');\n    \n    const handleAddTimerInput = (value) => {\n        setSelectedTimer(value);\n    };\n\n    const handleSelectedTimerMinutes = (value) => {\n            setStartMinutes(value);\n    }\n    \n    const handleSelectedTimerSeconds = (value) => {\n        setStartSeconds(value);\n    }\n\n    const handleSelectedTimerRestMinutes = (value) => {\n        setStartRestMinutes(value);\n    }\n\n    const handleSelectedTimerRestSeconds = (value) => {\n        setStartRestSeconds(value);\n    }\n\n    const handleSelectedTimerRounds = (value) => {\n        setRounds(value);\n    }\n\n    let listOptions = '';\n    let options = ['Choose One', 'Stopwatch', 'Countdown', 'XY', 'Tabata'];\n    if (options){\n        listOptions = options.map((option,index) => <option key={index} value={option}>{option}</option>);\n    }\n    else {\n        listOptions=<option>none</option>\n    }\n\n\n    return (\n        <div>\n            <select onChange={e => handleAddTimerInput(e.target.value)}>\n                {listOptions}\n            </select>\n         \n            {selectedTimer === 'Stopwatch' && \n                (<div>\n                    <h6 style={{\n                        marginBottom:0,\n                        }}>Minutes : Seconds\n                    </h6>\n                    <TimerInput options={minutesOptions} timeType=\"Minutes\" onChange={handleSelectedTimerMinutes}/> \n                    <span>:</span>\n                    <TimerInput options={secondsOptions} timeType=\"Seconds\" onChange={handleSelectedTimerSeconds}/>\n                </div>) \n            }\n\n            {selectedTimer === 'Countdown' && \n                (<div>\n                    <h6 style={{\n                        marginBottom:0,\n                        }}>Minutes : Seconds\n                    </h6>\n                    <TimerInput options={minutesOptions} timeType=\"Minutes\" onChange={handleSelectedTimerMinutes}/> \n                    <span>:</span>\n                    <TimerInput options={secondsOptions} timeType=\"Seconds\" onChange={handleSelectedTimerSeconds}/>\n                </div>) \n            }\n\n            {selectedTimer === 'XY' && \n                (<div>\n                    <h6 style={{\n                        marginBottom:0,\n                        }}>Minutes : Seconds\n                    </h6>\n                    <TimerInput options={minutesOptions} timeType=\"Minutes\" onChange={handleSelectedTimerMinutes}/> \n                    <span>:</span>\n                    <TimerInput options={secondsOptions} timeType=\"Seconds\" onChange={handleSelectedTimerSeconds}/>\n                    <h6 style={{\n                        marginBottom:0,\n                        }}>Rounds\n                    </h6>\n                    <TimerInput options={roundsOptions} timeType=\"Rounds\" onChange={handleSelectedTimerRounds}/>\n                </div>) \n            }\n\n            {selectedTimer === 'Tabata' && \n                (<div>\n                    <h5 style={{\n                        marginBottom: 2,\n                    }}>\n                        Work\n                        </h5>\n                    <h6 style={{\n                        marginTop: 0,\n                        marginBottom:2,\n                        }}>Minutes : Seconds\n                    </h6>\n                    <TimerInput options={minutesOptions} timeType=\"Minutes\" onChange={handleSelectedTimerMinutes}/> \n                    <span>:</span>\n                    <TimerInput options={secondsOptions} timeType=\"Seconds\" onChange={handleSelectedTimerSeconds}/>\n                    <div>\n                    <h5 style={{\n                        marginBottom:2,\n                        }}>\n                        Rest\n                    </h5>\n                        <h6 style={{\n                            marginTop:0,\n                            marginBottom:0,\n                            }}>Minutes : Seconds\n                        </h6>\n                        <TimerInput options={minutesOptions} timeType=\"Minutes\" onChange={handleSelectedTimerRestMinutes}/> \n                        <span>:</span>\n                        <TimerInput options={secondsOptions} timeType=\"Seconds\" onChange={handleSelectedTimerRestSeconds}/>\n                    </div>\n\n                    <h5 style={{\n                        marginBottom:2,\n                        }}>\n                        Rounds\n                    </h5>\n                    <TimerInput options={roundsOptions} timeType=\"Rounds\" onChange={handleSelectedTimerRounds}/>\n                </div>) \n            }\n\n            {selectedTimer && \n                <div>\n                    <Button value=\"Save\"\n                        color=\"#aaa0ff\"\n                        onClick={() => {\n                            saveTimer({\n                                id: selectedTimer?.id,\n                                index: (timers.length === 0) ? 0 : timers.length,\n                                selectedTimer,\n                                startMinutes,\n                                startSeconds,\n                                isRunning: 'not running',\n                                rounds,\n                                startRestMinutes,\n                                startRestSeconds,\n                                \n                            });\n                        }}\n                    />\n                    \n                    <Button value=\"Cancel\"\n                        color=\"#aaa0ff\" \n                        onClick={() => {\n                            closeEditor();\n                    }} />\n            </div>}\n\n\n\n        </div>\n\n\n\n    );\n};\n\n\nconst AddTimersView = () => {\n    const { openEditor, editorOpen } = useContext(TimersContext);\n  \n\treturn (\n\n        <span>\n            <Button value=\"Add New Timer\" color=\"#aaa0ff\" onClick={() => openEditor()} />\n\n            {editorOpen && <Editor />}\n        </span>\n\t\t);\n\n};\n\nexport default AddTimersView;\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\nimport AddTimersView from \"./views/AddTimersView\";\nimport TimersProvider from \"./utils/TimersProvider\";\n\nconst Container = styled.div`\n  background: #f0f6fb;\n  height: 100vh;\n  overflow: auto;\n`;\n\nconst Nav = () => {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/\">Timers</Link>\n        </li>\n        <li>\n          <Link to=\"/docs\">Documentation</Link>\n        </li>\n        <div style={{\n          backgroundColor: '#c0c0c0',\n          padding: 10,\n          borderRadius: 10,\n          width: \"fit-content\",\n        }}>\n          <Link style={{ textDecoration: \"None\"}}to=\"/add\">Add Timers</Link>\n        </div>\n\n        <div style={{\n          backgroundColor: '#c0c0c0',\n          padding: 10,\n          borderRadius: 10,\n          width: \"fit-content\",\n        }}>\n          <Link style={{ textDecoration: \"None\"}}to=\"/\">Home</Link>\n        </div>\n        \n      </ul>\n    </nav>\n  );\n};\n\nconst App = () => {\n  return (\n    <TimersProvider>\n      <Container>\n        <Router>\n          <Nav />\n          <Routes>\n            <Route path=\"/docs\" element={<DocumentationView />} />\n            <Route path=\"/\" element={<TimersView />} />\n            <Route path=\"/add\" element={<AddTimersView />} />\n          </Routes>\n        </Router>\n      </Container>\n    </TimersProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}